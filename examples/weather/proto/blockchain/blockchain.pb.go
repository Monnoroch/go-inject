// Code generated by protoc-gen-go. DO NOT EDIT.
// source: examples/weather/proto/blockchain/blockchain.proto

package blockchain

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PayRequest struct {
	From                 int64    `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   int64    `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	AmountMicroEth       int64    `protobuf:"varint,3,opt,name=amount_micro_eth,json=amountMicroEth,proto3" json:"amount_micro_eth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayRequest) Reset()         { *m = PayRequest{} }
func (m *PayRequest) String() string { return proto.CompactTextString(m) }
func (*PayRequest) ProtoMessage()    {}
func (*PayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f29738eea3761d1, []int{0}
}

func (m *PayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayRequest.Unmarshal(m, b)
}
func (m *PayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayRequest.Marshal(b, m, deterministic)
}
func (m *PayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayRequest.Merge(m, src)
}
func (m *PayRequest) XXX_Size() int {
	return xxx_messageInfo_PayRequest.Size(m)
}
func (m *PayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PayRequest proto.InternalMessageInfo

func (m *PayRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *PayRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *PayRequest) GetAmountMicroEth() int64 {
	if m != nil {
		return m.AmountMicroEth
	}
	return 0
}

type PayResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayResponse) Reset()         { *m = PayResponse{} }
func (m *PayResponse) String() string { return proto.CompactTextString(m) }
func (*PayResponse) ProtoMessage()    {}
func (*PayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f29738eea3761d1, []int{1}
}

func (m *PayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayResponse.Unmarshal(m, b)
}
func (m *PayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayResponse.Marshal(b, m, deterministic)
}
func (m *PayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayResponse.Merge(m, src)
}
func (m *PayResponse) XXX_Size() int {
	return xxx_messageInfo_PayResponse.Size(m)
}
func (m *PayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PayResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PayRequest)(nil), "blockchain.PayRequest")
	proto.RegisterType((*PayResponse)(nil), "blockchain.PayResponse")
}

func init() {
	proto.RegisterFile("examples/weather/proto/blockchain/blockchain.proto", fileDescriptor_9f29738eea3761d1)
}

var fileDescriptor_9f29738eea3761d1 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4a, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0x2d, 0xd6, 0x2f, 0x4f, 0x4d, 0x2c, 0xc9, 0x48, 0x2d, 0xd2, 0x2f, 0x28, 0xca,
	0x2f, 0xc9, 0xd7, 0x4f, 0xca, 0xc9, 0x4f, 0xce, 0x4e, 0xce, 0x48, 0xcc, 0xcc, 0x43, 0x62, 0xea,
	0x81, 0xe5, 0x84, 0xb8, 0x10, 0x22, 0x4a, 0x51, 0x5c, 0x5c, 0x01, 0x89, 0x95, 0x41, 0xa9, 0x85,
	0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42, 0x5c, 0x2c, 0x69, 0x45, 0xf9, 0xb9, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0xcc, 0x41, 0x60, 0xb6, 0x10, 0x1f, 0x17, 0x53, 0x49, 0xbe, 0x04, 0x13, 0x58, 0x84, 0xa9,
	0x24, 0x5f, 0x48, 0x83, 0x4b, 0x20, 0x31, 0x37, 0xbf, 0x34, 0xaf, 0x24, 0x3e, 0x37, 0x33, 0xb9,
	0x28, 0x3f, 0x3e, 0xb5, 0x24, 0x43, 0x82, 0x19, 0x2c, 0xcb, 0x07, 0x11, 0xf7, 0x05, 0x09, 0xbb,
	0x96, 0x64, 0x28, 0xf1, 0x72, 0x71, 0x83, 0xcd, 0x2e, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x35, 0x72,
	0xe3, 0xe2, 0x72, 0x82, 0x5b, 0x2c, 0x64, 0xc1, 0xc5, 0x1c, 0x90, 0x58, 0x29, 0x24, 0xa6, 0x87,
	0xe4, 0x3c, 0x84, 0x4b, 0xa4, 0xc4, 0x31, 0xc4, 0x21, 0xa6, 0x28, 0x31, 0x24, 0xb1, 0x81, 0x7d,
	0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xe1, 0xca, 0x4e, 0xfb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlockchainClient is the client API for Blockchain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockchainClient interface {
	Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayResponse, error)
}

type blockchainClient struct {
	cc *grpc.ClientConn
}

func NewBlockchainClient(cc *grpc.ClientConn) BlockchainClient {
	return &blockchainClient{cc}
}

func (c *blockchainClient) Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayResponse, error) {
	out := new(PayResponse)
	err := c.cc.Invoke(ctx, "/blockchain.Blockchain/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainServer is the server API for Blockchain service.
type BlockchainServer interface {
	Pay(context.Context, *PayRequest) (*PayResponse, error)
}

func RegisterBlockchainServer(s *grpc.Server, srv BlockchainServer) {
	s.RegisterService(&_Blockchain_serviceDesc, srv)
}

func _Blockchain_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.Blockchain/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).Pay(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Blockchain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.Blockchain",
	HandlerType: (*BlockchainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pay",
			Handler:    _Blockchain_Pay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "examples/weather/proto/blockchain/blockchain.proto",
}
