// Code generated by protoc-gen-go. DO NOT EDIT.
// source: examples/weather/proto/weather.proto

package weather

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SpaceTimeLocation struct {
	Location             string   `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UserId               int64    `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpaceTimeLocation) Reset()         { *m = SpaceTimeLocation{} }
func (m *SpaceTimeLocation) String() string { return proto.CompactTextString(m) }
func (*SpaceTimeLocation) ProtoMessage()    {}
func (*SpaceTimeLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_38e847e0f2ef639e, []int{0}
}

func (m *SpaceTimeLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpaceTimeLocation.Unmarshal(m, b)
}
func (m *SpaceTimeLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpaceTimeLocation.Marshal(b, m, deterministic)
}
func (m *SpaceTimeLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpaceTimeLocation.Merge(m, src)
}
func (m *SpaceTimeLocation) XXX_Size() int {
	return xxx_messageInfo_SpaceTimeLocation.Size(m)
}
func (m *SpaceTimeLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_SpaceTimeLocation.DiscardUnknown(m)
}

var xxx_messageInfo_SpaceTimeLocation proto.InternalMessageInfo

func (m *SpaceTimeLocation) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *SpaceTimeLocation) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SpaceTimeLocation) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type Weather struct {
	Weather              string   `protobuf:"bytes,1,opt,name=weather,proto3" json:"weather,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Weather) Reset()         { *m = Weather{} }
func (m *Weather) String() string { return proto.CompactTextString(m) }
func (*Weather) ProtoMessage()    {}
func (*Weather) Descriptor() ([]byte, []int) {
	return fileDescriptor_38e847e0f2ef639e, []int{1}
}

func (m *Weather) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Weather.Unmarshal(m, b)
}
func (m *Weather) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Weather.Marshal(b, m, deterministic)
}
func (m *Weather) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Weather.Merge(m, src)
}
func (m *Weather) XXX_Size() int {
	return xxx_messageInfo_Weather.Size(m)
}
func (m *Weather) XXX_DiscardUnknown() {
	xxx_messageInfo_Weather.DiscardUnknown(m)
}

var xxx_messageInfo_Weather proto.InternalMessageInfo

func (m *Weather) GetWeather() string {
	if m != nil {
		return m.Weather
	}
	return ""
}

func init() {
	proto.RegisterType((*SpaceTimeLocation)(nil), "weather.SpaceTimeLocation")
	proto.RegisterType((*Weather)(nil), "weather.Weather")
}

func init() {
	proto.RegisterFile("examples/weather/proto/weather.proto", fileDescriptor_38e847e0f2ef639e)
}

var fileDescriptor_38e847e0f2ef639e = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x49, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0x2d, 0xd6, 0x2f, 0x4f, 0x4d, 0x2c, 0xc9, 0x48, 0x2d, 0xd2, 0x2f, 0x28, 0xca,
	0x2f, 0xc9, 0x87, 0xf1, 0xf4, 0xc0, 0x3c, 0x21, 0x76, 0x28, 0x57, 0x29, 0x8d, 0x4b, 0x30, 0xb8,
	0x20, 0x31, 0x39, 0x35, 0x24, 0x33, 0x37, 0xd5, 0x27, 0x3f, 0x39, 0xb1, 0x24, 0x33, 0x3f, 0x4f,
	0x48, 0x8a, 0x8b, 0x23, 0x07, 0xca, 0x96, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf3, 0x85,
	0x64, 0xb8, 0x38, 0x4b, 0x32, 0x73, 0x53, 0x8b, 0x4b, 0x12, 0x73, 0x0b, 0x24, 0x98, 0x14, 0x18,
	0x35, 0x98, 0x83, 0x10, 0x02, 0x42, 0xe2, 0x5c, 0xec, 0xa5, 0xc5, 0xa9, 0x45, 0xf1, 0x99, 0x29,
	0x12, 0xcc, 0x60, 0x39, 0x36, 0x10, 0xd7, 0x33, 0x45, 0x49, 0x99, 0x8b, 0x3d, 0x1c, 0x62, 0xa5,
	0x90, 0x04, 0x17, 0xcc, 0x76, 0xa8, 0xe1, 0x30, 0xae, 0x91, 0x1f, 0x97, 0x20, 0x54, 0x51, 0x40,
	0x51, 0x6a, 0x4a, 0x66, 0x32, 0xd8, 0x42, 0x4b, 0x2e, 0x76, 0x28, 0x4f, 0x48, 0x4a, 0x0f, 0xe6,
	0x0b, 0x0c, 0x37, 0x4b, 0x09, 0xc0, 0xe5, 0xa0, 0x46, 0x28, 0x31, 0x24, 0xb1, 0x81, 0x3d, 0x6b,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x5b, 0xd3, 0xda, 0xd0, 0x14, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WeatherPredictionClient is the client API for WeatherPrediction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WeatherPredictionClient interface {
	Predict(ctx context.Context, in *SpaceTimeLocation, opts ...grpc.CallOption) (*Weather, error)
}

type weatherPredictionClient struct {
	cc *grpc.ClientConn
}

func NewWeatherPredictionClient(cc *grpc.ClientConn) WeatherPredictionClient {
	return &weatherPredictionClient{cc}
}

func (c *weatherPredictionClient) Predict(ctx context.Context, in *SpaceTimeLocation, opts ...grpc.CallOption) (*Weather, error) {
	out := new(Weather)
	err := c.cc.Invoke(ctx, "/weather.WeatherPrediction/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeatherPredictionServer is the server API for WeatherPrediction service.
type WeatherPredictionServer interface {
	Predict(context.Context, *SpaceTimeLocation) (*Weather, error)
}

func RegisterWeatherPredictionServer(s *grpc.Server, srv WeatherPredictionServer) {
	s.RegisterService(&_WeatherPrediction_serviceDesc, srv)
}

func _WeatherPrediction_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceTimeLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherPredictionServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weather.WeatherPrediction/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherPredictionServer).Predict(ctx, req.(*SpaceTimeLocation))
	}
	return interceptor(ctx, in, info, handler)
}

var _WeatherPrediction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "weather.WeatherPrediction",
	HandlerType: (*WeatherPredictionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _WeatherPrediction_Predict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "examples/weather/proto/weather.proto",
}
